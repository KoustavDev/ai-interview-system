// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  recruiter
  candidate
}

enum ApplicationStatus {
  pending
  interviewed
  shortlisted
  rejected
}

enum SenderType {
  ai
  candidate
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  role         Role
  avatar       String?
  refreshToken String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  recruiterProfile RecruiterProfile?
  candidateProfile CandidateProfile?
}

model RecruiterProfile {
  id            String  @id @default(uuid())
  userId        String  @unique
  companyName   String?
  position      String?
  about         String?
  contactNumber String?

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs Job[]
}

model CandidateProfile {
  id         String   @id @default(uuid())
  userId     String   @unique
  education  String?
  experience String?
  about      String?
  skills     String[]

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  resumes      Resume?
  applications Application[]
}

model Resume {
  id          String   @id @default(uuid())
  candidateId String   @unique
  fileUrl     String
  uploadedAt  DateTime @default(now())

  candidate    CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Job {
  id             String    @id @default(uuid())
  recruiterId    String
  title          String
  description    String
  type           String?
  salary         String?
  skillsRequired String[]
  experience     String?
  location       String?
  deadline       DateTime?
  responsibility String[]
  benefits       String[]
  requirement    String[]
  createdAt      DateTime  @default(now())

  recruiter    RecruiterProfile @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Application {
  id          String            @id @default(uuid())
  jobId       String
  candidateId String
  resumeId    String
  status      ApplicationStatus @default(pending)
  appliedAt   DateTime          @default(now())

  job       Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate CandidateProfile @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  resume    Resume           @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  interview AIInterview?
}

model AIInterview {
  id            String    @id @default(uuid())
  applicationId String    @unique
  startedAt     DateTime  @default(now())
  completedAt   DateTime?

  application  Application     @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  chatMessages AIChatMessage[]
  report       AIReport?
}

model AIChatMessage {
  id          String     @id @default(uuid())
  interviewId String
  sender      SenderType
  message     String
  timestamp   DateTime   @default(now())

  interview AIInterview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}

model AIReport {
  id          String   @id @default(uuid())
  interviewId String   @unique
  score       Int
  summary     String
  generatedAt DateTime @default(now())

  interview AIInterview @relation(fields: [interviewId], references: [id], onDelete: Cascade)
}
